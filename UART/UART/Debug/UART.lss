
UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000083  00800100  00800100  00000218  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000248  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000288  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000086f  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000780  00000000  00000000  00000b3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000034f  00000000  00000000  000012bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a0  00000000  00000000  00001610  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004a2  00000000  00000000  000016b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000ba  00000000  00000000  00001b52  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001c0c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 a8 00 	jmp	0x150	; 0x150 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 ea       	ldi	r30, 0xA4	; 164
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 38       	cpi	r26, 0x83	; 131
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 7f 00 	call	0xfe	; 0xfe <main>
  9e:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_Z10usart_initv>:
{
	// Daten verfügbar?
	while ((UCSR0A & (1 << RXC0)) == 0);
	
	return UDR0;
}
  a6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  aa:	87 e6       	ldi	r24, 0x67	; 103
  ac:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  b0:	e2 ec       	ldi	r30, 0xC2	; 194
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	8f 73       	andi	r24, 0x3F	; 63
  b8:	80 83       	st	Z, r24
  ba:	80 81       	ld	r24, Z
  bc:	86 60       	ori	r24, 0x06	; 6
  be:	80 83       	st	Z, r24
  c0:	80 81       	ld	r24, Z
  c2:	87 7f       	andi	r24, 0xF7	; 247
  c4:	80 83       	st	Z, r24
  c6:	e1 ec       	ldi	r30, 0xC1	; 193
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	88 e1       	ldi	r24, 0x18	; 24
  cc:	80 83       	st	Z, r24
  ce:	80 81       	ld	r24, Z
  d0:	80 68       	ori	r24, 0x80	; 128
  d2:	80 83       	st	Z, r24
  d4:	08 95       	ret

000000d6 <_Z14usart_put_byteh>:

void usart_put_byte(unsigned char data)
{
	// Senderegister frei?
	while ((UCSR0A & (1 << UDRE0)) == 0);
  d6:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  da:	95 ff       	sbrs	r25, 5
  dc:	fc cf       	rjmp	.-8      	; 0xd6 <_Z14usart_put_byteh>
	
	UDR0 = data;
  de:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  e2:	08 95       	ret

000000e4 <_Z16usart_put_stringPh>:
}

void usart_put_string(unsigned char* string_ptr)
{
  e4:	cf 93       	push	r28
  e6:	df 93       	push	r29
  e8:	ec 01       	movw	r28, r24
	while (*string_ptr != 0x00)
  ea:	88 81       	ld	r24, Y
  ec:	88 23       	and	r24, r24
  ee:	21 f0       	breq	.+8      	; 0xf8 <_Z16usart_put_stringPh+0x14>
	{
		usart_put_byte(*string_ptr);
  f0:	0e 94 6b 00 	call	0xd6	; 0xd6 <_Z14usart_put_byteh>
		string_ptr++;
  f4:	21 96       	adiw	r28, 0x01	; 1
	UDR0 = data;
}

void usart_put_string(unsigned char* string_ptr)
{
	while (*string_ptr != 0x00)
  f6:	f9 cf       	rjmp	.-14     	; 0xea <_Z16usart_put_stringPh+0x6>
	{
		usart_put_byte(*string_ptr);
		string_ptr++;
	}
}
  f8:	df 91       	pop	r29
  fa:	cf 91       	pop	r28
  fc:	08 95       	ret

000000fe <main>:
    //// -- Konfiguration Status-LED --
    //DDRB |= (1 << DDB5); // PIN PB5 als Ausgang konfigurieren
    //PORTB &= ~(1 << PORTB5); // LED ausschalten
	
	// enable global interrupt
	sei();
  fe:	78 94       	sei
	
	// -- Initialisierung USART Schnittstelle --
	usart_init();
 100:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z10usart_initv>
	    //else 
		//{
		    ////PORTB &= ~(1 << PORTB5);
	    //}
		
		if (uart_recv_interrupt)
 104:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <uart_recv_interrupt>
 108:	90 91 82 01 	lds	r25, 0x0182	; 0x800182 <uart_recv_interrupt+0x1>
 10c:	89 2b       	or	r24, r25
 10e:	c9 f0       	breq	.+50     	; 0x142 <main+0x44>
				//usart_put_string(my_string);
				//usart_put_byte(LINE_FEED);
			//}
			
			// all buffer content that ends in a LINE_FEED is interpreted as user-input
			if (uart_recv_buffer[uart_recv_buffer_index - 1] == LINE_FEED)
 110:	e0 91 80 01 	lds	r30, 0x0180	; 0x800180 <uart_recv_buffer_index>
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	e1 50       	subi	r30, 0x01	; 1
 118:	ff 4f       	sbci	r31, 0xFF	; 255
 11a:	80 81       	ld	r24, Z
 11c:	8a 30       	cpi	r24, 0x0A	; 10
 11e:	89 f4       	brne	.+34     	; 0x142 <main+0x44>
			{
				//usart_put_string(my_string);
				//usart_put_byte(LINE_FEED);
				
				//usart_put_string(my_string);
				usart_put_string(uart_recv_buffer);
 120:	80 e0       	ldi	r24, 0x00	; 0
 122:	91 e0       	ldi	r25, 0x01	; 1
 124:	0e 94 72 00 	call	0xe4	; 0xe4 <_Z16usart_put_stringPh>
				//usart_put_byte(LINE_FEED);
				
				uart_recv_interrupt = 0;
 128:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <uart_recv_interrupt+0x1>
 12c:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <uart_recv_interrupt>
				
				// reset the buffer to 0
				uart_recv_buffer_index = 0;
 130:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <uart_recv_buffer_index>
				//uart_recv_buffer[uart_recv_buffer_index] = 0x00;
				memset(uart_recv_buffer, 0, sizeof(uart_recv_buffer));
 134:	80 e8       	ldi	r24, 0x80	; 128
 136:	e0 e0       	ldi	r30, 0x00	; 0
 138:	f1 e0       	ldi	r31, 0x01	; 1
 13a:	df 01       	movw	r26, r30
 13c:	1d 92       	st	X+, r1
 13e:	8a 95       	dec	r24
 140:	e9 f7       	brne	.-6      	; 0x13c <main+0x3e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 142:	8f e3       	ldi	r24, 0x3F	; 63
 144:	9c e9       	ldi	r25, 0x9C	; 156
 146:	01 97       	sbiw	r24, 0x01	; 1
 148:	f1 f7       	brne	.-4      	; 0x146 <main+0x48>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <main+0x4e>
 14c:	00 00       	nop
 14e:	da cf       	rjmp	.-76     	; 0x104 <main+0x6>

00000150 <__vector_18>:
		string_ptr++;
	}
}

ISR(USART_RX_vect)
{
 150:	1f 92       	push	r1
 152:	0f 92       	push	r0
 154:	0f b6       	in	r0, 0x3f	; 63
 156:	0f 92       	push	r0
 158:	11 24       	eor	r1, r1
 15a:	8f 93       	push	r24
 15c:	9f 93       	push	r25
 15e:	ef 93       	push	r30
 160:	ff 93       	push	r31
	// communicate the arrival of a new character to the main loop
	uart_recv_interrupt = 1;
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	90 93 82 01 	sts	0x0182, r25	; 0x800182 <uart_recv_interrupt+0x1>
 16a:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <uart_recv_interrupt>
	
	// store the received byte in the receive buffer
	uart_recv_buffer[uart_recv_buffer_index] = UDR0;
 16e:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <uart_recv_buffer_index>
 172:	e8 2f       	mov	r30, r24
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 17a:	e0 50       	subi	r30, 0x00	; 0
 17c:	ff 4f       	sbci	r31, 0xFF	; 255
 17e:	90 83       	st	Z, r25
	
	// increment index
	uart_recv_buffer_index++;
 180:	8f 5f       	subi	r24, 0xFF	; 255
 182:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <uart_recv_buffer_index>
	if (uart_recv_buffer_index > uart_recv_buffer_size)
 186:	81 38       	cpi	r24, 0x81	; 129
 188:	10 f0       	brcs	.+4      	; 0x18e <__vector_18+0x3e>
	{
		uart_recv_buffer_index = 0;
 18a:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <uart_recv_buffer_index>
	
	//_delay_ms(1000);
	
	//PORTB &= ~( 1 << PORTB1 );
	//_delay_ms(1000);
}
 18e:	ff 91       	pop	r31
 190:	ef 91       	pop	r30
 192:	9f 91       	pop	r25
 194:	8f 91       	pop	r24
 196:	0f 90       	pop	r0
 198:	0f be       	out	0x3f, r0	; 63
 19a:	0f 90       	pop	r0
 19c:	1f 90       	pop	r1
 19e:	18 95       	reti

000001a0 <_exit>:
 1a0:	f8 94       	cli

000001a2 <__stop_program>:
 1a2:	ff cf       	rjmp	.-2      	; 0x1a2 <__stop_program>
